library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity server is
	port(inp: in std_logic_vector(3 downto 0); reset, clock: in std_logic;
	outp: out std_logic_vector(3 downto 0));
end entity server;

architecture bhv of server is

type state is (idle, stu, res, prof, admin, res_req, prof_req, admin_req);

signal p, n: state := idle;
signal S1: std_logic;

begin
	clock_proc: process(clock, reset)
	begin
	if(clock='1' and clock' event) then
		if(reset = '1') then
			p <= idle;
		else
			p <= n;
		end if;
	end if;
end process;

state_transition_proc_run: process(inp, p_run)
begin
	case p_run is
	
		when rst_run =>
		if(unsigned(inp)=18) then
			n_run <= r;
		else
			n_run <= rst_run;
		end if;
		
		when r =>
		if(unsigned(inp)=21) then
			n_run <= ru;
		else
			n_run <= r;
		end if;
		
		when ru =>
		if(unsigned(inp)=14) then
			n_run <= run;
		else
			n_run <= ru;
		end if;
		
		when run =>
		if(unsigned(inp)=18) then
			n_run <= r;
		else
			n_run <= rst_run;
		end if;
	end case;
end process state_transition_proc_run;

output_proc_run: process(n_run, inp) 
begin
	case n_run is
	
		when rst_run =>
		s_run <= '0';
		
		when r =>
		s_run <= '0';
		
		when ru =>
		s_run <= '0';
		
		when run =>
		s_run <= '1';
		
	end case;
end process output_proc_run;

outp <= s_run or s_cry or s_broom;

end bhv;